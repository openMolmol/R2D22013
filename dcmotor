const int analogInPin = A0;  

int sensorValue = 0;        
int outputValue = 0;  

long inch, w, median ;
long middle, samples;
long reading[255];

const int inchMin = 10;
const int inchMax = 40;

int pwm_a = 3;  //PWM control for motor 1 on digital pin 3
int pwm_b = 11;  //PWM control for motor 2 on digital pin 11
int dir_a = 12;  //dir control for motor 1 is on digital pin 12
int dir_b = 13;  //dir control for motor 2 is on digital pin 13


void setup() {  
  Serial.begin(9600); 
  
  pinMode(analogInPin, INPUT); // A0
  
  samples=11;

  pinMode(pwm_a, OUTPUT);   // pin 3 - Set control pins to be outputs
  pinMode(pwm_b, OUTPUT);   // pin 11
  pinMode(dir_a, OUTPUT);   // pin 12
  pinMode(dir_b, OUTPUT);   // pin 13
  
  analogWrite(pwm_a, 100);        // 39% duty cycle
  analogWrite(pwm_b, 100);

}


void loop() {

  //begin -  find maxbotic untrasonic sensor meduim value

    for (int k=0; k< samples; k++){
    reading[k]=analogRead(analogInPin);
    }
    for (int i=0; i< samples - 1; i++){
          for (int j=i+1; j< samples; j++){
       if (reading[i] > reading[j]){
        w = reading[i];
        reading[i] = reading[j];
        reading[j] =w;
        }      
       }
     }
     
  middle=(samples+1)/2;
  median = reading[middle];
  inch = (median/9.766) + 4 ;  
  
 // end - find maxbotic untrasonic sensor meduim value

  int range = map (inch, inchMin, inchMax, 0, 3) ;
  
   /*
   case 0 is when dist sensor 1 and/or distance sensor 2 readings are less than 13 inches, 
   stop for n seconds  
  get new readings from sensor
   
   case 1 is when dist sensor 1 and/or distance sensor 2 readings are between 13 - 50 inches, 
   and distance sensor 1 readiing is greater than 2 , 
   turn left for y seconds (180 degree), 
   move forward for z seconds
   stop for n seconds 
   get new readings from sensor
   
   case 2 is when dist sensor 1 and/or distance sensor 2 readings are between 13 - 50 inches, 
   and distance sensor 2 readiing is greater than 1 , 
   turn right for y seconds (180 degree), 
   move forward for z seconds,
   stop for n seconds  
   get new readings from sensor
   */ 
 
  
     switch (range) {
     
   case 0:
   Serial.println(inch);
   Serial.println("stop");
   stopped();      // stop for 2 seconds
   break;
   
   case 1:
   Serial.println(inch);
   Serial.println("turn left and moveforward");
   
  turnLeft();
  delay(100);
  forw();
  fadein(); 
  delay(100);  
  stopped(); 
  break;
                 }
 delay (1);
   
     
}


void forw() // no pwm defined
{ 
  digitalWrite(dir_a, HIGH); // set HIGH will go forward;
  digitalWrite(dir_b, HIGH);  
}

void back() // no pwm defined
{
  digitalWrite(dir_a, LOW);  // set LOW will go backward;
  digitalWrite(dir_b, LOW);  
}

void forward() //full speed forward
{ 
  digitalWrite(dir_a, HIGH);  //Reverse motor direction 
  digitalWrite(dir_b, HIGH);  //Reverse motor direction
  analogWrite(pwm_a, 255);   
  analogWrite(pwm_b, 255);
}

void backward() //full speed backward
{
  digitalWrite(dir_a, LOW);  //Set motor direction, 1 low, 2 high
  digitalWrite(dir_b, LOW);  //Set motor direction, 3 high, 4 low
  analogWrite(pwm_a, 255);   //set both motors to run at 100% duty cycle (fast)
  analogWrite(pwm_b, 255);
}

void stopped() //stop
{ 
  digitalWrite(dir_a, LOW); //Set motor direction, 1 low, 2 high
  digitalWrite(dir_b, LOW); //Set motor direction, 3 high, 4 low
  analogWrite(pwm_a, 0);    //set both motors to run at 0% duty cycle (fast)
  analogWrite(pwm_b, 0); 
}

void fadein()
{ 
  // fade in from min to max in increments of 5 points:
  for(int fadeValue = 0 ; fadeValue <= 255; fadeValue +=5) 
  { 
     // sets the value (range from 0 to 255):
    analogWrite(pwm_a, fadeValue);   
    analogWrite(pwm_b, fadeValue);    
    // wait for 30 milliseconds to see the dimming effect    
    delay(30);                            
  } 
}

void fadeout()
{ 
  // fade out from max to min in increments of 5 points:
  for(int fadeValue = 255 ; fadeValue >= 0; fadeValue -=5) 
  { 
    // sets the value (range from 0 to 255):  
    analogWrite(pwm_a, fadeValue);
    analogWrite(pwm_b, fadeValue);
    // wait for 30 milliseconds to see the dimming effect    
    delay(30);  
}
}

void astop()                   //stop motor A
{
  analogWrite(pwm_a, 0);    //set both motors to run at 0% duty cycle
}

void bstop()                   //stop motor B
{ 
  analogWrite(pwm_b, 0);    //set both motors to run at 0% duty cycle 
}

void turnRight(){
    digitalWrite(dir_a, HIGH);  //Reverse motor direction:  high or low
    digitalWrite(dir_b, LOW);  //Reverse motor direction, high or low 
    analogWrite(pwm_a, 255);   //set both motors to run at 100% duty cycle (fast)
    analogWrite(pwm_b, 255);
}

void turnLeft() {
    digitalWrite(dir_a, LOW);  //Reverse motor direction, 1 high, 2 low
    digitalWrite(dir_b, HIGH);  //Reverse motor direction, 3 low, 4 high  
    analogWrite(pwm_a, 255);   //set both motors to run at 100% duty cycle (fast)
    analogWrite(pwm_b, 255);
}
